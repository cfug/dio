import 'dart:developer';

import 'package:dio/dio.dart';

/// Used for Web Cookie
// const String _cookieKey = 'XSRF_TOKEN';
const String _headerKey = 'X-Csrf-Token';

void main() async {
  String? cachedCSRFToken;

  final dio = Dio()
    ..options.baseUrl = 'https://httpbin.org/'
    ..interceptors.add(
      QueuedInterceptorsWrapper(
        /// Add CSRF token to headers, if it exists
        onRequest: (requestOptions, handler) {
          if (cachedCSRFToken != null) {
            requestOptions.headers[_headerKey] = cachedCSRFToken;
          }
          return handler.next(requestOptions);
        },

        /// Update CSRF token from [response] headers, if it exists
        onResponse: (response, handler) {
          final token = response.headers.value(_headerKey);
          if (token != null) {
            cachedCSRFToken = token;
          }
          return handler.resolve(response);
        },
      ),
    );

  /// Make Requests
  await dio.get('/anything');
  log('1) Called \'/anything\' CSRF Token: $cachedCSRFToken');

  /// Expected 401 Exception
  try {
    await dio.post('/status/401');
  } catch (e) {
    log('2) Called \'/status/401\' CSRF Token: $cachedCSRFToken');
  }

  /// Add `onError` interceptor to request new CSRF token
  dio.interceptors.add(
    QueuedInterceptorsWrapper(
      /// Request new CSRF token
      /// if the response status code is `401`
      onError: (error, handler) async {
        log('Error Detected: ${error.message}');

        if (error.response == null) return handler.next(error);

        if (error.response?.statusCode == 401) {
          try {
            final tokenDio = Dio(
              BaseOptions(baseUrl: error.requestOptions.baseUrl),
            );

            /// Generate CSRF token
            ///
            /// This is a MOCK REQUEST to generate a CSRF token.
            /// In a real-world scenario, this should be generated by the server.
            final result = await tokenDio.post(
              '/response-headers',
              queryParameters: {
                _headerKey: '94d6d1ca-fa06-468f-a25c-2f769d04c26c',
              },
            );

            if (result.statusCode == null || result.statusCode! ~/ 100 != 2) {
              throw DioException(requestOptions: result.requestOptions);
            }

            final updatedToken = result.headers.value(_headerKey);
            if (updatedToken == null) throw ArgumentError.notNull(_headerKey);

            cachedCSRFToken = updatedToken;

            return handler.resolve(error.response!);
          } on DioException catch (e) {
            return handler.reject(e);
          }
        }
      },
    ),
  );
  await dio.post('/status/401');
  log('3) Called \'/status/401\' CSRF Token: $cachedCSRFToken');

  await dio.get('/anything/posts');
  log('4) Called \'/anything/posts\' CSRF Token: $cachedCSRFToken');
}
